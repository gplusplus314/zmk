/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC>;
};

#define BASE_L    0
#define NAVSYM_L  1
#define NAVFN_L   2
#define WM_L      3
#define STNGS_L   4

#define G_Q     &plht LGUI         Q
#define G_R     &plht LGUI         R
#define G_A     &plht LSHFT        A
#define G_O     &prht RSHFT        O
#define G_N0    &prht RSHFT        N0
#define G_SEMI  &prht RGUI         SEMI
#define G_I     &prht RGUI         I
#define G_SPC   &ght  LCTRL        SPC
#define G_ESC   &ght  LALT         ESC
#define G_RET   &glt  WM_L         RET
#define G_BSPC  &glt  NAVSYM_L     BSPC
#define G_DEL   &glt  NAVFN_L      DEL
#define G_F10   &prht RSHFT        F10
#define G_F3    &prht RGUI         F3
#define G_F2    &prht RALT         F2
#define G_F1    &prht RCTRL        F1
#define G_UNDER &ght LA(LCTRL)     UNDER

#define AS(keycode) &as LS(keycode) keycode     // Standard Autoshift Macro
#define AS2(key1, key2) &as key2 key1           // Custom Autoshift Macro
#define G_LPRN AS2(LS(N9), LS(COMMA))
#define G_RPRN AS2(LS(N0), LS(DOT))
#define G_LBKT AS(LBKT)
#define G_RBKT AS(RBKT)

&sl {
  release-after-ms = <3000>;
};

/ {
    combos {
      compatible = "zmk,combos";

      // shortcut
      #define COMBO(NAME, BINDINGS, KEYPOS, TIMEOUT, LAYERS) \
      combo_##NAME { \
        timeout-ms = <TIMEOUT>; \
        bindings = <BINDINGS>; \
        key-positions = <KEYPOS>; \
        layers = <LAYERS>; \
      };

      /*                KEY POSITIONS

        ╭────────────────────────╮  ╭────────────────────────╮
        │  0   1   2   3   4     │  │      5   6   7   8   9 │
        │ 10  11  12  13  14     │  │     15  16  17  18  19 │
        │ 20  21  22  23  24     │  │     25  26  27  28  29 │
        ╰───────────╮ 30  31  32 │  │ 33  34  35 ╭───────────╯
                    ╰────────────╯  ╰────────────╯        */

      COMBO(capsword, &caps_word, 10 19, 35, BASE_L)
      
      COMBO(tab, AS(TAB), 12 13, 25, BASE_L NAVSYM_L)
      COMBO(quote, AS(SQT), 16 17, 25, BASE_L)

      COMBO(minus_l, AS(MINUS), 11 12, 25, BASE_L NAVSYM_L)
      COMBO(equal_l, AS(EQUAL), 1 2, 25, BASE_L)
      COMBO(equal_r, AS(EQUAL), 17 18, 25, BASE_L)
      COMBO(minus_r, AS(MINUS), 7 8, 25, BASE_L NAVSYM_L)

      COMBO(prevwin, AS(LG(UP)), 3 13, 35, BASE_L)
      COMBO(nextwin, AS(LG(DOWN)), 6 16, 35, BASE_L)

      COMBO(lprn, G_LPRN, 12 23, 35, BASE_L)
      COMBO(rprn, G_RPRN, 17 26, 35, BASE_L)
      COMBO(lbkt, G_LBKT, 22 23, 35, BASE_L)
      COMBO(rbkt, G_RBKT, 26 27, 35, BASE_L)

      COMBO(under, G_UNDER, 31 32, 35, BASE_L)
      COMBO(del, G_DEL, 33 34, 35, BASE_L)

      COMBO(settings, &sl STNGS_L, 6 7 8 9, 35, BASE_L)
    };

    behaviors {
      plht: positional_left_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "POSITIONAL_LEFT_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <150>;
        quick-tap-ms = <150>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 31 32 34>;
      };

      prht: positional_right_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "POSITIONAL_RIGHT_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <150>;
        quick-tap-ms = <150>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 31 32 34>;
      };

      fhrm: fkey_home_row_mod {
        compatible = "zmk,behavior-hold-tap";
        label = "FKEY_HOME_ROW_MOD";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <150>;
        quick-tap-ms = <150>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <16 17 18 19 33 34>;
      };

      ght: gerrys_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "HOLD_TAP";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <150>;
        quick-tap-ms = <150>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <10 19 33 34>;
      };

      glt: gerrys_layer_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "LAYER_TAP";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <150>;
        quick-tap-ms = <150>;
        bindings = <&mo>, <&kp>;
      };

      as: auto_shift {
        compatible = "zmk,behavior-hold-tap";
        label = "AUTO_SHIFT";
        #binding-cells = <2>;
        tapping_term_ms = <150>;
        quick_tap_ms = <150>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
      };

    };

	keymap {
		compatible = "zmk,keymap";

		base_layer {
			bindings = <
        &kp Q        &kp W         &kp F         &kp P              &kp B         /*& &*/     &kp J               &kp L            &kp U                    &kp Y         AS(SEMI)
        G_A          G_R           &kp S         &kp T              &kp G         /*& &*/     &kp M               &kp N            &kp E                    G_I           G_O
        &kp Z        &kp X         &kp C         &kp D              &kp V         /*& &*/     &kp K               &kp H            AS(COMMA)                AS(DOT)       AS(FSLH)
        /*&    &*/                     &trans        G_SPC              G_ESC     /*& &*/ G_RET          G_BSPC           &trans                /* &             &*/
			>;
		};

		navsym_layer {
			bindings = <
        &trans       &kp HOME      &kp UP       &kp END             &kp PG_UP             /*& &*/     AS(EQUAL)           AS(N4)           AS(N5)                   AS(N6)        AS(DOT)
        &trans       &kp LEFT      &kp DOWN     &kp RIGHT           &kp PG_DN             /*& &*/     AS(GRAVE)           AS(N1)           AS(N2)                   AS(N3)        AS(N0)
        &trans       G_LBKT        G_LPRN       G_RPRN              G_RBKT                /*& &*/     AS(MINUS)           AS(N7)           AS(N8)                   AS(N9)        AS(BSLH)
        /*&    &*/                     &trans        &trans             &trans            /*& &*/ &trans         &trans           &trans                /* &             &*/
			>;
		};

		navfn_layer {
			bindings = <
        &trans       &trans        &trans       &trans              &trans                 /*& &*/     &kp C_VOL_UP        &kp F4           &kp F5                   &kp F6        &kp F11   
        &kp LSHFT    &kp LGUI      &kp LALT     &kp LCTRL           &trans                 /*& &*/     &kp K_MUTE          G_F1             G_F2                     G_F3          G_F10
        &trans       &trans        &trans       &trans              &trans                 /*& &*/     &kp C_VOL_DN        &kp F7           &kp F8                   &kp F9        &kp F12
        /*&    &*/                     &trans     &plht LCTRL LC(SPC)   &plht LALT LA(ESC) /*& &*/ &trans         &trans           &trans                /* &             &*/
			>;
		};

		wm_layer {
			bindings = <
        &trans       &trans        &trans        &trans             &trans         /*& &*/     &trans              AS(LG(N4))       AS(LG(N5))               AS(LG(N6))    AS(LG(RIGHT))
        &trans       &trans        &trans        &trans             &trans         /*& &*/     &trans              AS(LG(N1))       AS(LG(N2))               AS(LG(N3))    AS(LG(N0))    
        &trans       &trans        &trans        &trans             &trans         /*& &*/     &trans              AS(LG(N7))       AS(LG(N8))               AS(LG(N9))    AS(LG(LEFT))
        /*&    &*/                     &trans &ght LCTRL LC(SPC) &ght LALT LA(ESC) /*& &*/ &trans         &trans           &trans                /* &             &*/
			>;
		};

		settings_layer {
			bindings = <
        &trans       &trans        &bt BT_SEL 4  &bt BT_SEL 3       &bt BT_CLR    /*& &*/     &trans              &trans           &trans                   &trans        &trans
        &trans       &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0       &trans        /*& &*/     &trans              &trans           &trans                   &trans        &trans
        &trans       &trans        &trans        &trans             &trans        /*& &*/     &trans              &trans           &trans                   &trans        &trans
        /*&    &*/                     &trans        &trans             &trans    /*& &*/ &trans         &trans           &trans                /* &             &*/
			>;
		};

		trans_layer {
			bindings = <
        &trans       &trans        &trans        &trans             &trans        /*& &*/     &trans              &trans           &trans                   &trans        &trans
        &trans       &trans        &trans        &trans             &trans        /*& &*/     &trans              &trans           &trans                   &trans        &trans
        &trans       &trans        &trans        &trans             &trans        /*& &*/     &trans              &trans           &trans                   &trans        &trans
        /*&    &*/                     &trans        &trans             &trans    /*& &*/ &trans         &trans           &trans                /* &             &*/
			>;
		};

	};
};
